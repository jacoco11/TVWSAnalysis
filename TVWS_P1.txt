import os
import sys
import subprocess
import csv
import matplotlib.pyplot as plt
import numpy as np

# Globals
__directory = None
__graph = None
__filters = []
__tempTotal = []
__tempAvg = []
__totalCalcs = {}
__avgCalcs = {}


# Function to set or update path of current working directory
def set_directory():
    global __directory
    loop2 = True
    while loop2:
        inpt = input("Enter directory: ")
        if inpt == "exit": loop2 = False
        elif inpt == "list": print(__directory)
        elif inpt == "info":
            print("Set_Directory Info: " +
                  "\nInput: " +
                  "\n- 'list' : Outputs path to current working directory" +
                  "\n- 'exit' : Returns to main menu")
        elif os.path.isdir(inpt):
            __directory = inpt
            print("Directory path set. ")
            loop2 = False
        else: print("Directory does not exist, re-renter. ")

# Function to set or update fields to be filtered when processing .pcap files
def set_filters():
    global __filters
    loop2 = True
    while loop2:
        fltrs = list(input("Enter filters: ").split())
        if fltrs[0] == "exit": loop2 = False
        elif fltrs[0] == "info":
            print("Set_Filter Info: " +
                  "\nPreface command using: " +
                  "\n- 'add' : Adds one or more fields to existing filter, separating arguments with a space" +
                  "\n- 'remove' : Removes one or more fields from existing filter, separating arguments with a space" +
                  "\n- 'clear' : Clears filter" +
                  "\n- 'list' : Outputs current fields in filter" +
                  "\n- 'exit' : Returns to main menu" +
                  "\nNone of the above arguments clears filter and adds in one or more fields, separating with a space")
        elif fltrs[0] == "add":
            for item in fltrs:
                if item not in __filters and item != "add":
                    __filters.append(item)
            print("Filter(s) added. ")
        elif fltrs[0] == "remove":
            for item in fltrs:
                if item != "remove" and item in __filters:
                    __filters.remove(item)
            print("Filter(s) removed. ")
        elif fltrs[0] == "clear":
            __filters.clear()
            print("Filters cleared. ")
        elif fltrs[0] == "list":
            print(__filters)
        else:
            __filters.clear()
            for item in fltrs:
                __filters.append(item)
            print("Filter(s) added. ")

# Function to set graph type
def set_graph():
    global __graph
    loop2 = True
    while loop2:
        choice = input("Select graph type: ")
        if choice == "exit":
            loop2 = False
        elif choice == "info":
            print("Process Info: " +
                  "\nInput: " +
                  "\n- 'plot' : Set graph to plot" +
                  "\n- 'scatter' : Set graph to scatter" +
                  "\n- 'bar' : Set graph to bar")
        elif choice == "plot" or choice == "scatter" or choice == "bar":
            __graph = choice
            print("Graph set.")
        else: print("Invalid entry, re-renter. ")

# -------------------------------------------------------------------------------

# Function to process and output data
def process():
    global __tempTotal
    global __tempAvg
    global __totalCalcs
    global __avgCalcs
    global __graph

    loop2 = True
    pro = input("Process .pcap data? ")
    if pro == 'y':
        print("Processing files... ")
        for file in os.listdir(__directory):
            if file.endswith(".pcap"):
                filename2 = os.path.splitext(file)[0] + '.csv'
                with open(__directory + "\\" + filename2, "w") as outfile:
                    command = []

                    commandBegin = ["tshark.exe", "-r", os.path.join(__directory, file)]
                    for item in commandBegin:
                        command.append(item)
                    # If filters are specified, include those in command, otherwise use default filters
                    if len(__filters) != 0:
                        # fields = " ".join(str(e) for e in __filters2) #list to string
                        for fltr in __filters:
                            command.append("-e")
                            command.append(fltr)
                    else:
                        commandDefault = ["-e", "frame.number", "-e", "frame.time_delta", "-e", "_ws.col.Source", "-e",
                                          "_ws.col.Destination", "-e", "_ws.col.Protocol", "-e", "ip.len", "-e",
                                          "_ws.col.Info"]
                        for item in commandDefault:
                            command.append(item)

                    commandEnd = ["-T", "fields", "-E", "separator=,"]
                    for item in commandEnd:
                        command.append(item)
                    try:
                        subprocess.run(command, stdout=outfile, check=True)
                    except:
                        loop2 = False
                        continue

    while loop2:
        choice = input("Enter function: ")
        if choice == "exit":
            loop2 = False
        elif choice == "info":
            print("Process Info: " +
                  "\nInput: " +
                  "\n- 'calc' : Calculates total and averages among values" +
                  "\n- 'plot' : Plots desired data points")

        # Perform calculations on data: total and average
        elif choice == "calc":
            check = True
            while check:
                calc = input("Enter function: ")
                if calc == "total" or calc == "avg": check = False
                else: print("Invalid function, re-enter. ")
            check2 = True
            while check2:
                value = input("Enter field: ")
                if value in __filters: check2 = False
                else: print("invalid field, re-enter. ")
            indx = int(__filters.index(value))
            print("INDEX: ", indx)

            for file in os.listdir(__directory):
                total = 0
                count = 0
                avg = 0
                if file.endswith(".csv"):
                    with open(os.path.join(__directory, file)) as f:
                        csv_reader = csv.reader(f, delimiter=',')
                        for row in csv_reader:
                            line = row[indx].rstrip()
                            if line:
                                if calc == "total":
                                    total += int(row[indx])
                                elif calc == "avg":
                                    avg += int(row[indx])
                                    count += 1

                        if calc == "total":
                            if __totalCalcs.get(value) != None:
                                currentTotal = __totalCalcs.get(value)
                                currentTotal = currentTotal + total
                                __totalCalcs[value] = currentTotal
                            else: __totalCalcs[value] = total
                        elif calc == "avg":
                            __tempAvg.append([avg, count])
            if calc == "avg":
                try:
                    totalAvg = 0
                    totalCount = 0
                    for item in __tempAvg:
                        totalAvg += item[0]
                        totalCount += item[1]
                    avg = totalAvg / totalCount
                    __avgCalcs[value] = avg
                    print("AVERAGE: ", __avgCalcs[value])
                except:
                    print("Error: Unable to perform calculation")
            else: print("TOTAL: ", __totalCalcs[value])

        # Graph data points
        elif choice == "plot":
            if __graph != None:
                plt.grid()
                plt.rcParams["figure.figsize"] = [100.00, 5.00]
                plt.rcParams["figure.autolayout"] = True
                check2 = True
                while check2:
                    value1 = input("Enter field 1: ")
                    value2 = input("Enter field 2: ")
                    if value1 in __filters and value2 in __filters: check2 = False
                    else: print("Invalid field(s), re-enter. ")
                indx1 = int(__filters.index(value1))
                indx2 = int(__filters.index(value2))
                print(indx1, indx2)
                for file in os.listdir(__directory):
                    if file.endswith(".csv"):
                        with open(os.path.join(__directory, file)) as f:
                            csv_reader = csv.reader(f, delimiter=',')
                            for row in csv_reader:
                                line1 = row[indx1].rstrip()
                                line2 = row[indx2].rstrip()
                                if line1 and line2:
                                    print(row[indx1], row[indx2])
                                    plt.plot(float(row[indx1]), float(row[indx2]), marker = "o", markersize = 7.5,
                                             markerfacecolor = "blue")
                plt.show()

        else: print("Invalid function, re-enter. ")

# -------------------------------------------------------------------------------

def main():
    global __directory
    global __filters
    global __graph

    print("PCAP Trace Processing Tool")
    loop = True

    while loop:
        print("Main Menu: ")
        choice = input()

        if choice == "info":
            print("Main Menu Info: " +
                  "\nInput: " +
                  "\n- 'dir' : Enter specified directory from which .pcap files are processed" +
                  "\n- 'filter' : Enter fields to filter .pcap files from specified directory" +
                  "\n- 'graph' : Enter fields to be present in graph and type of graph" +
                  "\n- 'process' : Processes .pcap files in specified directory with chosen fields, and outputs them" +
                  " in desired graph" +
                  "\n- 'exit' : Exits PCAP Trace Processing Tool")
        elif choice == "dir":
            set_directory()
        elif choice == "filter":
            set_filters()
        elif choice == "graph":
            set_graph()
        elif choice == "process":
            process()
        elif choice == "exit":
            loop = False
        else: print("Invalid command, re-enter. ")


main()